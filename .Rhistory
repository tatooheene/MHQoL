mhqol_LSS(dimensions = c(IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "total", ignore.invalid = TRUE)
devtools::document()
runApp('inst/shiny')
runApp('inst/shiny')
shiny::runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
shiny::runApp('inst/shiny')
mhqol_valueset()
mhqol(dimensions = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "average")
mhqol(dimensions = c(IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "total", ignore_invalid = TRUE)
mhqol    <- function(dimensions,
country = "Netherlands",
metric = c("average", "total"),
ignore_invalid = FALSE,
ignore_NA = TRUE) {
# Check if metric is a single value
if (length(metric) != 1) {
stop("The 'metric' argument must be a single value. Please choose either 'total' or 'average' ")
}
# Check if metric is either "total" or "average"
if (!metric %in% c("total", "average")) {
stop("Invalid metric chosen. Please choose either 'total' or 'average'.")
}
# Check whether the input are characters or numeric
data <-  mhqol::mhqol_utilities(dimensions = dimensions,
country = country,
ignore_invalid = ignore_invalid,
ignore_NA = ignore_NA,
retain_old_variables = FALSE)
# If the chosen metric is "total", provide a total score per participant
if(metric == "total"){
data <- data |>
dplyr::mutate(
utility = 1 + rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
return(data)
# If the chosen metric is "average", provide an average score per dimension and overall
} else if(metric == "average"){
data <- data |>
dplyr::mutate(
utility = 1 + rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
SI_u_average <- mean(data$SI_u, na.rm = TRUE)
IN_u_average <- mean(data$IN_u, na.rm = TRUE)
MO_u_average <- mean(data$MO_u, na.rm = TRUE)
RE_u_average <- mean(data$RE_u, na.rm = TRUE)
DA_u_average <- mean(data$DA_u, na.rm = TRUE)
PH_u_average <- mean(data$PH_u, na.rm = TRUE)
FU_u_average <- mean(data$FU_u, na.rm = TRUE)
utility_average <- mean(data$utility, na.rm = TRUE)
df <- data.frame(SI_u_average,
IN_u_average,
MO_u_average,
RE_u_average,
DA_u_average,
PH_u_average,
FU_u_average,
utility_average)
return(df)
}
}
mhqol(dimensions = c(IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "total", ignore_invalid = TRUE)
mhqol(dimensions = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "average")
mhqol(dimensions = c(IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "total", ignore_invalid = TRUE)
mhqol(dimensions = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "average")
mhqol(dimensions = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "average")
mhqol    <- function(dimensions,
country = "Netherlands",
metric = c("average", "total"),
ignore_invalid = FALSE,
ignore_NA = TRUE) {
# Check if metric is a single value
if (length(metric) != 1) {
stop("The 'metric' argument must be a single value. Please choose either 'total' or 'average' ")
}
# Check if metric is either "total" or "average"
if (!metric %in% c("total", "average")) {
stop("Invalid metric chosen. Please choose either 'total' or 'average'.")
}
# Check whether the input are characters or numeric
data <-  mhqol::mhqol_utilities(dimensions = dimensions,
country = country,
ignore_invalid = ignore_invalid,
ignore_NA = ignore_NA,
retain_old_variables = FALSE)
# If the chosen metric is "total", provide a total score per participant
if(metric == "total"){
data <- data |>
dplyr::mutate(
utility = 1 + rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
return(data)
# If the chosen metric is "average", provide an average score per dimension and overall
} else if(metric == "average"){
data <- data |>
dplyr::mutate(
utility = 1 + rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
SI_u_average <- mean(data$SI_u, na.rm = TRUE)
IN_u_average <- mean(data$IN_u, na.rm = TRUE)
MO_u_average <- mean(data$MO_u, na.rm = TRUE)
RE_u_average <- mean(data$RE_u, na.rm = TRUE)
DA_u_average <- mean(data$DA_u, na.rm = TRUE)
PH_u_average <- mean(data$PH_u, na.rm = TRUE)
FU_u_average <- mean(data$FU_u, na.rm = TRUE)
utility_average <- mean(data$utility, na.rm = TRUE)
df <- data.frame(SI_u_average,
IN_u_average,
MO_u_average,
RE_u_average,
DA_u_average,
PH_u_average,
FU_u_average,
utility_average)
return(df)
}
}
mhqol_utilities()
#HIER NOG TATOOHEENE VOORZETTEN!
mhqol     <- function(dimensions,
country = "Netherlands",
metric = c("average", "total"),
ignore_invalid = FALSE,
ignore_NA = TRUE) {
# Check if metric is a single value
if (length(metric) != 1) {
stop("The 'metric' argument must be a single value. Please choose either 'total' or 'average' ")
}
# Check if metric is either "total" or "average"
if (!metric %in% c("total", "average")) {
stop("Invalid metric chosen. Please choose either 'total' or 'average'.")
}
# Check whether the input are characters or numeric
data <-  mhqol::mhqol_utilities(dimensions = dimensions,
country = country,
ignore_invalid = ignore_invalid,
ignore_NA = ignore_NA,
retain_old_variables = FALSE)
# If the chosen metric is "total", provide a total score per participant
if(metric == "total"){
data <- data |>
dplyr::mutate(
utility = 1 + rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
return(data)
# If the chosen metric is "average", provide an average score per dimension and overall
} else if(metric == "average"){
data <- data |>
dplyr::mutate(
utility = 1 + rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
SI_u_average <- mean(data$SI_u, na.rm = TRUE)
IN_u_average <- mean(data$IN_u, na.rm = TRUE)
MO_u_average <- mean(data$MO_u, na.rm = TRUE)
RE_u_average <- mean(data$RE_u, na.rm = TRUE)
DA_u_average <- mean(data$DA_u, na.rm = TRUE)
PH_u_average <- mean(data$PH_u, na.rm = TRUE)
FU_u_average <- mean(data$FU_u, na.rm = TRUE)
utility_average <- mean(data$utility, na.rm = TRUE)
df <- data.frame(SI_u_average,
IN_u_average,
MO_u_average,
RE_u_average,
DA_u_average,
PH_u_average,
FU_u_average,
utility_average)
return(df)
}
}
mhqol(dimensions = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "average")
mhqol_LSS <- function(dimensions,
metric = c("average", "total"),
ignore_invalid = FALSE,
ignore_NA = TRUE) {
# Ensure metric is a single valid value
metric <- match.arg(metric)
# Convert character dimensions to numeric scores
if (all(sapply(dimensions, is.character))) {
data <- mhqol::mhqol_states_to_scores(states = dimensions,
ignore_invalid = ignore_invalid,
ignore_NA = ignore_NA,
retain_old_variables = FALSE)
} else if (all(sapply(dimensions, is.numeric))) {
data <- as.data.frame(dimensions)  # Ensure it's a dataframe
} else {
stop("The 'dimensions' argument must be either all numeric or all character values.")
}
# Compute LSS scores
data <- data %>%
dplyr::mutate(
LSS = rowSums(dplyr::across(where(is.numeric)), na.rm = TRUE)
)
# If metric is "total", return the dataframe
if (metric == "total") {
return(data)
}
# If metric is "average", compute mean scores for each dimension
average_scores <- data %>%
dplyr::summarize(across(where(is.numeric), mean, na.rm = TRUE))
return(average_scores)
}
mhqol_LSS(dimensions = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "average")
mhqol_LSS(dimensions = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "average")
mhqol_LSS(dimensions = c(IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "total", ignore_invalid = TRUE)
mhqol_scores_to_states(scores = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3))
mhqol_scores_to_states(scores = c(IN = 2, DA = 1, PH = 2, FU = 3), ignore_invalid = TRUE)
mhqol_scores_to_states(scores = c(IN = 2, DA = 1, PH = 2, FU = 3), ignore_invalid = "TRUE")
mhqol_scores_to_states(scores = c(IN = 2, DA = 1, PH = 2, FU = 3), ignore_invalid == "TRUE")
mhqol_scores_to_states  <- function(scores,
ignore_invalid = FALSE,
ignore_NA = TRUE,
retain_old_variables = TRUE){
# Convert the different input types into a dataframe
convert_to_df <- function(scores){
# If input is a dataframe
if(is.data.frame(scores)){
return(scores)
}
# If input is a numeric vector
else if(is.numeric(scores)){
if(is.null(names(scores))){
stop("Numeric vector must have names for dimension mapping")
}
df <- data.frame(matrix(ncol = length(scores), nrow = 1))
names(df) <- names(scores)
for(dim in names(scores)){
df[[dim]] <- scores[dim]
}
return(df)
}
# If input is a list
else if(is.list(scores)){
if(is.null(names(scores))){
stop("List must have names for dimension mapping")
}
return(as.data.frame(scores, stringsAsFactors = FALSE))
} else{
stop("Invalid input type. Please provide a dataframe, numeric vector or list")
}
}
scores <- convert_to_df(scores)
# Required scores
required_scores <- c("SI", "IN", "MO", "RE", "DA", "PH", "FU")
# Check for missing scores
missing_scores <- setdiff(required_scores, colnames(scores))
if(length(missing_scores) > 0){
if(ignore_invalid == FALSE)
stop(paste(
"The following required scores are missing:",
paste(missing_scores, collapse = ",")
))
} else if(ignore_invalid == TRUE){
warning(paste(
"The following required scores are missing and will be ignored:",
paste(missing_scores, collapse = ",")
))
# Remove missing scores from processing
scores <-  setdiff(required_scores, missing_scores)
}
if(any(is.na(scores))){
if(ignore_NA == FALSE){
stop("The data contains NA values. Please handle NAs or set ignore_NA = TRUE.")
} else if (ignore_NA == TRUE){
warning("The data contains NA values. They willl be ignored in processing")
}
}
if(all(sapply(scores, is.numeric))){
new_scores <- scores |>
dplyr::mutate(
SI_s = if("SI" %in% colnames(scores)){
dplyr::case_when(SI == 3 ~ "I think very positively about myself", # SELF-IMAGE
SI == 2 ~ "I think positively about myself",
SI == 1 ~ "I think negatively about myself",
SI == 0 ~ "I think very negatively about myself",
TRUE ~ NA_character_)
}else{
NA_character_
},
IN_s = if("IN" %in% colnames(scores)){
dplyr::case_when(IN == 3 ~ "I am very satisfied with my level of independence", # INDEPENDENCE
IN == 2 ~ "I am satisfied with my level of independence",
IN == 1 ~ "I am dissatisfied with my level of independence",
IN == 0 ~ "I am very dissatisfied with my level of independence",
TRUE ~ NA_character_)
}else{
NA_character_
},
MO_s = if("MO" %in% colnames(scores)){
dplyr::case_when(MO == 3 ~ "I do not feel anxious, gloomy, or depressed",    # MOOD
MO == 2 ~ "I feel a little anxious, gloomy, or depressed",
MO == 1 ~ "I feel anxious, gloomy, or depressed",
MO == 0 ~ "I feel very anxious, gloomy, or depressed",
TRUE ~ NA_character_)
}else{
NA_character_
},
RE_s = if("RE" %in% colnames(scores)){
dplyr::case_when(RE == 3 ~ "I am very satisfied with my relationships",     # RELATIONSHIPS
RE == 2 ~ "I am satisfied with my relationships",
RE == 1 ~ "I am dissatisfied with my relationships",
RE == 0 ~  "I am very dissatisfied with my relationships",
TRUE ~ NA_character_)
}else{
NA_character_
},
DA_s = if("DA" %in% colnames(scores)){
dplyr::case_when(DA == 3 ~ "I am very satisfied with my daily activities",  # DAILY ACTIVITIES
DA == 2 ~ "I am satisfied with my daily activities",
DA == 1 ~ "I am dissatisfied with my daily activities",
DA ==  0 ~ "I am very dissatisfied with my daily activities",
TRUE ~ NA_character_)
}else{
NA_character_
},
PH_s = if("PH" %in% colnames(scores)){
dplyr::case_when(PH == 3 ~ "I have no physical health problems",  # PHYSICAL HEALTH
PH == 2 ~ "I have some physical health problems",
PH == 1 ~ "I have many physical health problems" ,
PH == 0 ~  "I have a great many physical health problems",
TRUE ~ NA_character_)
}else{
NA_character_
},
FU_s = if("FU" %in% colnames(scores)){
dplyr::case_when(FU == 3 ~ "I am very optimistic about my future", # FUTURE
FU == 2 ~ "I am optimistic about my future",
FU == 1 ~ "I am gloomy about my future",
FU == 0 ~ "I am very gloomy about my future",
TRUE ~ NA_character_)
}else{
NA_character_
}
)
return(new_scores)
} else{
stop("All scores must be numeric")
}
}
mhqol_scores_to_states(scores = c(IN = 2, DA = 1, PH = 2, FU = 3), ignore_invalid = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools
devtools::document()
rm(list = c("mhqol", "mhqol_LSS", "mhqol_scores_to_states"))
devtooo
devtools::document()
mhqol_scores_to_states  <- function(scores,
ignore_invalid = FALSE,
ignore_NA = TRUE,
retain_old_variables = TRUE){
# Convert the different input types into a dataframe
convert_to_df <- function(scores){
# If input is a dataframe
if(is.data.frame(scores)){
return(scores)
}
# If input is a numeric vector
else if(is.numeric(scores)){
if(is.null(names(scores))){
stop("Numeric vector must have names for dimension mapping")
}
df <- data.frame(matrix(ncol = length(scores), nrow = 1))
names(df) <- names(scores)
for(dim in names(scores)){
df[[dim]] <- scores[dim]
}
return(df)
}
# If input is a list
else if(is.list(scores)){
if(is.null(names(scores))){
stop("List must have names for dimension mapping")
}
return(as.data.frame(scores, stringsAsFactors = FALSE))
} else{
stop("Invalid input type. Please provide a dataframe, numeric vector or list")
}
}
scores <- convert_to_df(scores)
# Required scores
required_scores <- c("SI", "IN", "MO", "RE", "DA", "PH", "FU")
# Check for missing scores
missing_scores <- setdiff(required_scores, colnames(scores))
if(length(missing_scores) > 0){
if(ignore_invalid == FALSE)
stop(paste(
"The following required scores are missing:",
paste(missing_scores, collapse = ",")
))
} else if(ignore_invalid == TRUE){
warning(paste(
"The following required scores are missing and will be ignored:",
paste(missing_scores, collapse = ",")
))
# Remove missing scores from processing
scores <-  setdiff(required_scores, missing_scores)
}
if(any(is.na(scores))){
if(ignore_NA == FALSE){
stop("The data contains NA values. Please handle NAs or set ignore_NA = TRUE.")
} else if (ignore_NA == TRUE){
warning("The data contains NA values. They willl be ignored in processing")
}
}
if(all(sapply(scores, is.numeric))){
new_scores <- scores |>
dplyr::mutate(
SI_s = if("SI" %in% colnames(scores)){
dplyr::case_when(SI == 3 ~ "I think very positively about myself", # SELF-IMAGE
SI == 2 ~ "I think positively about myself",
SI == 1 ~ "I think negatively about myself",
SI == 0 ~ "I think very negatively about myself",
TRUE ~ NA_character_)
}else{
NA_character_
},
IN_s = if("IN" %in% colnames(scores)){
dplyr::case_when(IN == 3 ~ "I am very satisfied with my level of independence", # INDEPENDENCE
IN == 2 ~ "I am satisfied with my level of independence",
IN == 1 ~ "I am dissatisfied with my level of independence",
IN == 0 ~ "I am very dissatisfied with my level of independence",
TRUE ~ NA_character_)
}else{
NA_character_
},
MO_s = if("MO" %in% colnames(scores)){
dplyr::case_when(MO == 3 ~ "I do not feel anxious, gloomy, or depressed",    # MOOD
MO == 2 ~ "I feel a little anxious, gloomy, or depressed",
MO == 1 ~ "I feel anxious, gloomy, or depressed",
MO == 0 ~ "I feel very anxious, gloomy, or depressed",
TRUE ~ NA_character_)
}else{
NA_character_
},
RE_s = if("RE" %in% colnames(scores)){
dplyr::case_when(RE == 3 ~ "I am very satisfied with my relationships",     # RELATIONSHIPS
RE == 2 ~ "I am satisfied with my relationships",
RE == 1 ~ "I am dissatisfied with my relationships",
RE == 0 ~  "I am very dissatisfied with my relationships",
TRUE ~ NA_character_)
}else{
NA_character_
},
DA_s = if("DA" %in% colnames(scores)){
dplyr::case_when(DA == 3 ~ "I am very satisfied with my daily activities",  # DAILY ACTIVITIES
DA == 2 ~ "I am satisfied with my daily activities",
DA == 1 ~ "I am dissatisfied with my daily activities",
DA ==  0 ~ "I am very dissatisfied with my daily activities",
TRUE ~ NA_character_)
}else{
NA_character_
},
PH_s = if("PH" %in% colnames(scores)){
dplyr::case_when(PH == 3 ~ "I have no physical health problems",  # PHYSICAL HEALTH
PH == 2 ~ "I have some physical health problems",
PH == 1 ~ "I have many physical health problems" ,
PH == 0 ~  "I have a great many physical health problems",
TRUE ~ NA_character_)
}else{
NA_character_
},
FU_s = if("FU" %in% colnames(scores)){
dplyr::case_when(FU == 3 ~ "I am very optimistic about my future", # FUTURE
FU == 2 ~ "I am optimistic about my future",
FU == 1 ~ "I am gloomy about my future",
FU == 0 ~ "I am very gloomy about my future",
TRUE ~ NA_character_)
}else{
NA_character_
}
)
return(new_scores)
} else{
stop("All scores must be numeric")
}
}
devtools::install_github("tatooheene/mhqol")
devtools::install_github("tatooheene/mhqol")
library(mhqol)
mhqol_utilities(dimensions = c(IN = 2, MO = 1, RE = 0, DA = 3, PH = 2, FU = 1), ignore_invalid = TRUE)
mhqol_utilities(dimensions = df, ignore_invalid = TRUE)
mhqol(dimensions = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "average")
mhqol(dimensions = c(IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "total", ignore_invalid = TRUE)
