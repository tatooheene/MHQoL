}
return(df)
}
# If input is a list
else if(is.list(scores)){
if(is.null(names(scores))){
stop("List must have names for dimension mapping")
}
return(as.data.frame(scores, stringsAsFactors = FALSE))
} else{
stop("Invalid input type. Please provide a dataframe, numeric vector or list")
}
}
scores <- convert_to_df(scores)
# Required scores
required_scores <- c("SI", "IN", "MO", "RE", "DA", "PH", "FU")
# Check for missing scores
missing_scores <- setdiff(required_scores, colnames(scores))
if(length(missing_scores) > 0){
if(ignore.invalid == FALSE)
stop(paste(
"The following required scores are missing:",
paste(missing_scores, collapse = ",")
))
} else if(ignore.invalid == TRUE){
warning(paste(
"The following required scores are missing and will be ignored:",
paste(missing_scores, collapse = ",")
))
# Remove missing scores from processing
scores <-  setdiff(required_scores, missing_scores)
}
if(any(is.na(scores))){
if(ignore.NA == FALSE){
stop("The data contains NA values. Please handle NAs or set ignore.NA = TRUE.")
} else if (ignore.NA == TRUE){
warning("The data contains NA values. They willl be ignored in processing")
}
}
if(all(sapply(scores, is.numeric))){
new_scores <- scores |>
dplyr::mutate(
SI_s = if("SI" %in% colnames(scores)){
dplyr::case_when(SI == 3 ~ "I think very positively about myself", # SELF-IMAGE
SI == 2 ~ "I think positively about myself",
SI == 1 ~ "I think negatively about myself",
SI == 0 ~ "I think very negatively about myself",
TRUE ~ NA_character_)
}else{
NA_character_
},
IN_s = if("IN" %in% colnames(scores)){
dplyr::case_when(IN == 3 ~ "I am very satisfied with my level of independence", # INDEPENDENCE
IN == 2 ~ "I am satisfied with my level of independence",
IN == 1 ~ "I am dissatisfied with my level of independence",
IN == 0 ~ "I am very dissatisfied with my level of independence",
TRUE ~ NA_character_)
}else{
NA_character_
},
MO_s = if("MO" %in% colnames(scores)){
dplyr::case_when(MO == 3 ~ "I do not feel anxious, gloomy, or depressed",    # MOOD
MO == 2 ~ "I feel a little anxious, gloomy, or depressed",
MO == 1 ~ "I feel anxious, gloomy, or depressed",
MO == 0 ~ "I feel very anxious, gloomy, or depressed",
TRUE ~ NA_character_)
}else{
NA_character_
},
RE_s = if("RE" %in% colnames(scores)){
dplyr::case_when(RE == 3 ~ "I am very satisfied with my relationships",     # RELATIONSHIPS
RE == 2 ~ "I am satisfied with my relationships",
RE == 1 ~ "I am dissatisfied with my relationships",
RE == 0 ~  "I am very dissatisfied with my relationships",
TRUE ~ NA_character_)
}else{
NA_character_
},
DA_s = if("DA" %in% colnames(scores)){
dplyr::case_when(DA == 3 ~ "I am very satisfied with my daily activities",  # DAILY ACTIVITIES
DA == 2 ~ "I am satisfied with my daily activities",
DA == 1 ~ "I am dissatisfied with my daily activities",
DA =  0 ~ "I am very dissatisfied with my daily activities",
TRUE ~ NA_character_)
}else{
NA_character_
},
PH_s = if("PH" %in% colnames(scores)){
dplyr::case_when(PH == 3 ~ "I have no physical health problems",  # PHYSICAL HEALTH
PH == 2 ~ "I have some physical health problems",
PH == 1 ~ "I have many physical health problems" ,
PH == 0 ~  "I have a great many physical health problems",
TRUE ~ NA_character_)
}else{
NA_character_
},
FU_s = if("FU" %in% colnames(scores)){
dplyr::case_when(FU == 3 ~ "I am very optimistic about my future", # FUTURE
FU == 2 ~ "I am optimistic about my future",
FU == 1 ~ "I am gloomy about my future",
FU == 0 ~ "I am very gloomy about my future",
TRUE ~ NA_character_)
}else{
NA_character_
}
)
return(new_scores)
} else{
stop("All scores must be numeric")
}
}
mhqol_scores_to_states(scores = c(IN = 2, MO = 3, DA = 1, PH = 2, FU = 3), ignore.invalid = TRUE)
mhqol_scores_to_states <- function(scores,
ignore.invalid = FALSE,
ignore.NA = TRUE,
retain_old_variables = TRUE){
# Convert the different input types into a dataframe
convert_to_df <- function(scores){
# If input is a dataframe
if(is.data.frame(scores)){
return(scores)
}
# If input is a numeric vector
else if(is.numeric(scores)){
if(is.null(names(scores))){
stop("Numeric vector must have names for dimension mapping")
}
df <- data.frame(matrix(ncol = length(scores), nrow = 1))
names(df) <- names(scores)
for(dim in names(scores)){
df[[dim]] <- scores[dim]
}
return(df)
}
# If input is a list
else if(is.list(scores)){
if(is.null(names(scores))){
stop("List must have names for dimension mapping")
}
return(as.data.frame(scores, stringsAsFactors = FALSE))
} else{
stop("Invalid input type. Please provide a dataframe, numeric vector or list")
}
}
scores <- convert_to_df(scores)
# Required scores
required_scores <- c("SI", "IN", "MO", "RE", "DA", "PH", "FU")
# Check for missing scores
missing_scores <- setdiff(required_scores, colnames(scores))
if(length(missing_scores) > 0){
if(ignore.invalid == FALSE)
stop(paste(
"The following required scores are missing:",
paste(missing_scores, collapse = ",")
))
} else if(ignore.invalid == TRUE){
warning(paste(
"The following required scores are missing and will be ignored:",
paste(missing_scores, collapse = ",")
))
# Remove missing scores from processing
scores <-  setdiff(required_scores, missing_scores)
}
if(any(is.na(scores))){
if(ignore.NA == FALSE){
stop("The data contains NA values. Please handle NAs or set ignore.NA = TRUE.")
} else if (ignore.NA == TRUE){
warning("The data contains NA values. They willl be ignored in processing")
}
}
if(all(sapply(scores, is.numeric))){
new_scores <- scores |>
dplyr::mutate(
SI_s = if("SI" %in% colnames(scores)){
dplyr::case_when(SI == 3 ~ "I think very positively about myself", # SELF-IMAGE
SI == 2 ~ "I think positively about myself",
SI == 1 ~ "I think negatively about myself",
SI == 0 ~ "I think very negatively about myself",
TRUE ~ NA_character_)
}else{
NA_character_
},
IN_s = if("IN" %in% colnames(scores)){
dplyr::case_when(IN == 3 ~ "I am very satisfied with my level of independence", # INDEPENDENCE
IN == 2 ~ "I am satisfied with my level of independence",
IN == 1 ~ "I am dissatisfied with my level of independence",
IN == 0 ~ "I am very dissatisfied with my level of independence",
TRUE ~ NA_character_)
}else{
NA_character_
},
MO_s = if("MO" %in% colnames(scores)){
dplyr::case_when(MO == 3 ~ "I do not feel anxious, gloomy, or depressed",    # MOOD
MO == 2 ~ "I feel a little anxious, gloomy, or depressed",
MO == 1 ~ "I feel anxious, gloomy, or depressed",
MO == 0 ~ "I feel very anxious, gloomy, or depressed",
TRUE ~ NA_character_)
}else{
NA_character_
},
RE_s = if("RE" %in% colnames(scores)){
dplyr::case_when(RE == 3 ~ "I am very satisfied with my relationships",     # RELATIONSHIPS
RE == 2 ~ "I am satisfied with my relationships",
RE == 1 ~ "I am dissatisfied with my relationships",
RE == 0 ~  "I am very dissatisfied with my relationships",
TRUE ~ NA_character_)
}else{
NA_character_
},
DA_s = if("DA" %in% colnames(scores)){
dplyr::case_when(DA == 3 ~ "I am very satisfied with my daily activities",  # DAILY ACTIVITIES
DA == 2 ~ "I am satisfied with my daily activities",
DA == 1 ~ "I am dissatisfied with my daily activities",
DA ==  0 ~ "I am very dissatisfied with my daily activities",
TRUE ~ NA_character_)
}else{
NA_character_
},
PH_s = if("PH" %in% colnames(scores)){
dplyr::case_when(PH == 3 ~ "I have no physical health problems",  # PHYSICAL HEALTH
PH == 2 ~ "I have some physical health problems",
PH == 1 ~ "I have many physical health problems" ,
PH == 0 ~  "I have a great many physical health problems",
TRUE ~ NA_character_)
}else{
NA_character_
},
FU_s = if("FU" %in% colnames(scores)){
dplyr::case_when(FU == 3 ~ "I am very optimistic about my future", # FUTURE
FU == 2 ~ "I am optimistic about my future",
FU == 1 ~ "I am gloomy about my future",
FU == 0 ~ "I am very gloomy about my future",
TRUE ~ NA_character_)
}else{
NA_character_
}
)
return(new_scores)
} else{
stop("All scores must be numeric")
}
}
mhqol_scores_to_states(scores = c(IN = 2, MO = 3, DA = 1, PH = 2, FU = 3), ignore.invalid = TRUE)
mhqol_scores_to_states(scores = c(IN = 2, MO = 3, DA = 1, PH = 2, FU = 3), ignore.invalid = TRUE)
mhqol_scores_to_states(scores = c(IN = 2, DA = 1, PH = 2, FU = 3), ignore.invalid = TRUE)
mhqol_scores_to_states(scores = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3))
mhqol_scores_to_states  <- function(scores,
ignore.invalid = FALSE,
ignore.NA = TRUE,
retain_old_variables = TRUE){
# Convert the different input types into a dataframe
convert_to_df <- function(scores){
# If input is a dataframe
if(is.data.frame(scores)){
return(scores)
}
# If input is a numeric vector
else if(is.numeric(scores)){
if(is.null(names(scores))){
stop("Numeric vector must have names for dimension mapping")
}
df <- data.frame(matrix(ncol = length(scores), nrow = 1))
names(df) <- names(scores)
for(dim in names(scores)){
df[[dim]] <- scores[dim]
}
return(df)
}
# If input is a list
else if(is.list(scores)){
if(is.null(names(scores))){
stop("List must have names for dimension mapping")
}
return(as.data.frame(scores, stringsAsFactors = FALSE))
} else{
stop("Invalid input type. Please provide a dataframe, numeric vector or list")
}
}
scores <- convert_to_df(scores)
# Required scores
required_scores <- c("SI", "IN", "MO", "RE", "DA", "PH", "FU")
# Check for missing scores
missing_scores <- setdiff(required_scores, colnames(scores))
if(length(missing_scores) > 0){
if(ignore.invalid == FALSE)
stop(paste(
"The following required scores are missing:",
paste(missing_scores, collapse = ",")
))
} else if(ignore.invalid == TRUE){
warning(paste(
"The following required scores are missing and will be ignored:",
paste(missing_scores, collapse = ",")
))
# Remove missing scores from processing
scores <-  setdiff(required_scores, missing_scores)
}
if(any(is.na(scores))){
if(ignore.NA == FALSE){
stop("The data contains NA values. Please handle NAs or set ignore.NA = TRUE.")
} else if (ignore.NA == TRUE){
warning("The data contains NA values. They willl be ignored in processing")
}
}
if(all(sapply(scores, is.numeric))){
new_scores <- scores |>
dplyr::mutate(
SI_s = if("SI" %in% colnames(scores)){
dplyr::case_when(SI == 3 ~ "I think very positively about myself", # SELF-IMAGE
SI == 2 ~ "I think positively about myself",
SI == 1 ~ "I think negatively about myself",
SI == 0 ~ "I think very negatively about myself",
TRUE ~ NA_character_)
}else{
NA_character_
},
IN_s = if("IN" %in% colnames(scores)){
dplyr::case_when(IN == 3 ~ "I am very satisfied with my level of independence", # INDEPENDENCE
IN == 2 ~ "I am satisfied with my level of independence",
IN == 1 ~ "I am dissatisfied with my level of independence",
IN == 0 ~ "I am very dissatisfied with my level of independence",
TRUE ~ NA_character_)
}else{
NA_character_
},
MO_s = if("MO" %in% colnames(scores)){
dplyr::case_when(MO == 3 ~ "I do not feel anxious, gloomy, or depressed",    # MOOD
MO == 2 ~ "I feel a little anxious, gloomy, or depressed",
MO == 1 ~ "I feel anxious, gloomy, or depressed",
MO == 0 ~ "I feel very anxious, gloomy, or depressed",
TRUE ~ NA_character_)
}else{
NA_character_
},
RE_s = if("RE" %in% colnames(scores)){
dplyr::case_when(RE == 3 ~ "I am very satisfied with my relationships",     # RELATIONSHIPS
RE == 2 ~ "I am satisfied with my relationships",
RE == 1 ~ "I am dissatisfied with my relationships",
RE == 0 ~  "I am very dissatisfied with my relationships",
TRUE ~ NA_character_)
}else{
NA_character_
},
DA_s = if("DA" %in% colnames(scores)){
dplyr::case_when(DA == 3 ~ "I am very satisfied with my daily activities",  # DAILY ACTIVITIES
DA == 2 ~ "I am satisfied with my daily activities",
DA == 1 ~ "I am dissatisfied with my daily activities",
DA ==  0 ~ "I am very dissatisfied with my daily activities",
TRUE ~ NA_character_)
}else{
NA_character_
},
PH_s = if("PH" %in% colnames(scores)){
dplyr::case_when(PH == 3 ~ "I have no physical health problems",  # PHYSICAL HEALTH
PH == 2 ~ "I have some physical health problems",
PH == 1 ~ "I have many physical health problems" ,
PH == 0 ~  "I have a great many physical health problems",
TRUE ~ NA_character_)
}else{
NA_character_
},
FU_s = if("FU" %in% colnames(scores)){
dplyr::case_when(FU == 3 ~ "I am very optimistic about my future", # FUTURE
FU == 2 ~ "I am optimistic about my future",
FU == 1 ~ "I am gloomy about my future",
FU == 0 ~ "I am very gloomy about my future",
TRUE ~ NA_character_)
}else{
NA_character_
}
)
return(new_scores)
} else{
stop("All scores must be numeric")
}
}
mhqol_scores_to_states(scores = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3))
mhqol_utilities_to_states(utilities = c(IN = 2, DA = 1, PH = 2, FU = 3), ignore.invalid = TRUE)
mhqol_utilities_to_states <- function(utilities,
country = "Netherlands",
ignore.invalid = FALSE,
ignore.NA = TRUE,
retain_old_variables = TRUE){
# Read in utility dataset
df_utilities_countries <- readRDS("data/df_utilities_countries.RDS") ##AANPASSEN
# Convert the different input types into a dataframe
convert_to_df <- function(scores){
# If input is a dataframe
if(is.data.frame(scores)){
return(scores)
}
# If input is a numeric vector
else if(is.numeric(scores)){
if(is.null(names(scores))){
stop("Numeric vector must have names for dimension mapping")
}
df <- data.frame(matrix(ncol = length(scores), nrow = 1))
names(df) <- names(scores)
for(dim in names(scores)){
df[[dim]] <- scores[dim]
}
return(df)
}
# If input is a list
else if(is.list(scores)){
if(is.null(names(scores))){
stop("List must have names for dimension mapping")
}
return(as.data.frame(scores, stringsAsFactors = FALSE))
} else{
stop("Invalid input type. Please provide a dataframe, numeric vector or list")
}
}
scores <- convert_to_df(scores)
# Required scores
required_scores <- c("SI", "IN", "MO", "RE", "DA", "PH", "FU")
# Check for missing scores
missing_scores <- setdiff(required_scores, colnames(scores))
if(length(missing_scores) > 0){
if(ignore.invalid == FALSE)
stop(paste(
"The following required scores are missing:",
paste(missing_scores, collapse = ",")
))
} else if(ignore.invalid == TRUE){
warning(paste(
"The following required scores are missing and will be ignored:",
paste(missing_scores, collapse = ",")
))
# Remove missing scores from processing
scores <-  setdiff(required_scores, missing_scores)
}
if(any(is.na(scores))){
if(ignore.NA == FALSE){
stop("The data contains NA values. Please handle NAs or set ignore.NA = TRUE.")
} else if (ignore.NA == TRUE){
warning("The data contains NA values. They willl be ignored in processing")
}
}
if(all(sapply(scores, is.numeric))){
new_scores <- scores |>
dplyr::mutate(
SI_s = if("SI" %in% colnames(scores)){
dplyr::case_when(SI == df_utilities_countries[df_utilities_countries$dimensions =="SI_3", country] ~ "I think very positively about myself", # SELF-IMAGE
SI == df_utilities_countries[df_utilities_countries$dimensions =="SI_2", country] ~ "I think positively about myself",
SI == df_utilities_countries[df_utilities_countries$dimensions =="SI_1", country] ~ "I think negatively about myself",
SI == df_utilities_countries[df_utilities_countries$dimensions =="SI_0", country] ~ "I think very negatively about myself",
TRUE ~ NA_character_)
}else{
NA_character_
},
IN_s = if("IN" %in% colnames(scores)){
dplyr::case_when(IN == df_utilities_countries[df_utilities_countries$dimensions =="IN_3", country] ~ "I am very satisfied with my level of independence", # INDEPENDENCE
IN == df_utilities_countries[df_utilities_countries$dimensions =="IN_2", country] ~ "I am satisfied with my level of independence",
IN == df_utilities_countries[df_utilities_countries$dimensions =="IN_1", country] ~ "I am dissatisfied with my level of independence",
IN == df_utilities_countries[df_utilities_countries$dimensions =="IN_0", country] ~ "I am very dissatisfied with my level of independence",
TRUE ~ NA_character_)
}else{
NA_character_
},
MO_s = if("MO" %in% colnames(scores)){
dplyr::case_when(MO == df_utilities_countries[df_utilities_countries$dimensions =="MO_3", country] ~ "I do not feel anxious, gloomy, or depressed",    # MOOD
MO == df_utilities_countries[df_utilities_countries$dimensions =="MO_2", country] ~ "I feel a little anxious, gloomy, or depressed",
MO == df_utilities_countries[df_utilities_countries$dimensions =="MO_1", country] ~ "I feel anxious, gloomy, or depressed",
MO == df_utilities_countries[df_utilities_countries$dimensions =="MO_0", country] ~ "I feel very anxious, gloomy, or depressed",
TRUE ~ NA_character_)
}else{
NA_character_
},
RE_s = if("RE" %in% colnames(scores)){
dplyr::case_when(RE == df_utilities_countries[df_utilities_countries$dimensions =="RE_3", country]~ "I am very satisfied with my relationships",     # RELATIONSHIPS
RE == df_utilities_countries[df_utilities_countries$dimensions =="RE_2", country] ~ "I am satisfied with my relationships",
RE == df_utilities_countries[df_utilities_countries$dimensions =="RE_1", country] ~ "I am dissatisfied with my relationships",
RE == df_utilities_countries[df_utilities_countries$dimensions =="RE_0", country] ~  "I am very dissatisfied with my relationships",
TRUE ~ NA_character_)
}else{
NA_character_
},
DA_s = if("DA" %in% colnames(scores)){
dplyr::case_when(DA == df_utilities_countries[df_utilities_countries$dimensions =="DA_3", country] ~ "I am very satisfied with my daily activities",  # DAILY ACTIVITIES
DA == df_utilities_countries[df_utilities_countries$dimensions =="DA_2", country] ~ "I am satisfied with my daily activities",
DA == df_utilities_countries[df_utilities_countries$dimensions =="DA_1", country] ~ "I am dissatisfied with my daily activities",
DA == df_utilities_countries[df_utilities_countries$dimensions =="DA_0", country] ~ "I am very dissatisfied with my daily activities",
TRUE ~ NA_character_)
}else{
NA_character_
},
PH_s = if("PH" %in% colnames(scores)){
dplyr::case_when(PH == df_utilities_countries[df_utilities_countries$dimensions =="PH_3", country] ~ "I have no physical health problems",  # PHYSICAL HEALTH
PH == df_utilities_countries[df_utilities_countries$dimensions =="PH_2", country] ~ "I have some physical health problems",
PH == df_utilities_countries[df_utilities_countries$dimensions =="PH_1", country] ~ "I have many physical health problems" ,
PH == df_utilities_countries[df_utilities_countries$dimensions =="PH_0", country] ~  "I have a great many physical health problems",
TRUE ~ NA_character_)
}else{
NA_character_
},
FU_s = if("FU" %in% colnames(scores)){
dplyr::case_when(FU == df_utilities_countries[df_utilities_countries$dimensions =="FU_3", country] ~ "I am very optimistic about my future", # FUTURE
FU == df_utilities_countries[df_utilities_countries$dimensions =="FU_2", country] ~ "I am optimistic about my future",
FU == df_utilities_countries[df_utilities_countries$dimensions =="FU_1", country] ~ "I am gloomy about my future",
FU == df_utilities_countries[df_utilities_countries$dimensions =="FU_0", country] ~ "I am very gloomy about my future",
TRUE ~ NA_character_)
}else{
NA_character_
}
)
return(new_scores)
} else{
stop("All scores must be numeric")
}
}
mhqol_utilities_to_states(utilities = c(IN = 2, DA = 1, PH = 2, FU = 3), ignore.invalid = TRUE)
