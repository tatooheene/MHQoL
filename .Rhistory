options(shiny.sanitize.errors = FALSE)
addResourcePath('example-data', "~/mhqol/inst/extdata") # Dit later aanpassen
# First panel to recalculate dimensions into scores or utilities ----------
uploaded_data <- reactive({
req(input$file)
file_path <- input$file$datapath
# Read the file based on its extension
data <- tryCatch(
if (grepl("\\.csv$", input$file$name)) {
read_csv(file_path)
} else if (grepl("\\.xlsx$", input$file$name)) {
readxl::read_excel(file_path)
} else if (grepl("\\.rds$", input$file$name)) {
readRDS(file_path)
} else {
return(NULL)
},
error = function(e) return(NULL)  # Return NULL if there's an error
)
data <- data |>
dplyr::select("ID", "Group", "SI", "IN", "MO", "RE","DA","PH", "FU")
if(input$output_decision == "Utilities"){
# Recalculate data into scores/utilities based on the input
data <- mhqol::mhqol(dimensions = data[, 3:9],
country = input$country_decision,
metric = "total",
ignore.invalid = input$invalid_decision,
ignore.NA = input$NA_decision,
retain_old_variables = TRUE)
}
else if(input$output_decision == "Scores"){
data <- mhqol::mhqol_LSS(dimensions = data[, 3:9],
metric = "total",
ignore.invalid = input$invalid_decision,
ignore.NA = input$NA_decision)
}
return(data)
})
# Warning message if the file is invalid
output$warning_message <- renderText({
if (is.null(uploaded_data())) {
return("⚠️ Please upload a valid dataframe (CSV, Excel, or RDS).")
}
return(NULL)  # No warning if file is valid
})
# Render the processed table
output$data_output <- renderDT({
req(uploaded_data())
datatable(uploaded_data(), options = list(pageLength = 15))
})
}
# Run the application
shinyApp(ui = ui, server = server)
devtools::document
devtools::document()
mhqol::mhqol_LSS
runApp('inst/shiny')
#' A function to calculate the Level Sum Scores (LSS) of the MHQoL
#'
#' @description
#' `r lifecycle::badge("experimental")`
#' This function calculates the Level Sum Scores (LSS) per dimension of overall
#' of the MHQoL based on the scores of the different dimensions.
#'
#' @param dimensions A dataframe, character vector or list containing the dimensions of the MHQoL.
#' Must contain the following dimensions: SI (Self-Image), IN (INdependence),
#' MO (MOod), RE (RElationships), DA (Daily Activities), PH (Physical Health), FU (FUture).
#'
#' @param metric A character value indicating whether to calculate the "total" or "average" LSS.
#'
#' @param ignore.invalid If TRUE, the function will ignore missing dimensions and continue processing.
#' If FALSE, the function will stop and throw an error.
#'
#' @param ignore.NA If TRUE, the function will ignore NA values in the input data.
#' If FALSE, the function will stop and throw an error.
#'
#' @return A dataframe containing the LSS based on the MHQoL manual.
#'
#' @keywords MHQoL, LSS, Dimensions
#'
#' @examples
#' # Example usage of the mhqol_LSS function
#' # Get the LSS based on a character vector and calculate the total LSS, not all dimensions are present
#' mhqol_LSS(dimensions = c(IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "total", ignore.invalid = TRUE)
#'
#' # Get the LSS based on a dataframe and calculate the average LSS, all dimensions are present
#' mhqol_LSS(dimensions = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "average")
#HIER NOG TATOOHEENE VOORZETTEN!
mhqol_LSS <- function(dimensions,
metric = c("average", "total"),
ignore.invalid = FALSE,
ignore.NA = TRUE) {
# Check if metric is a single value
if (length(metric) != 1) {
stop("The 'metric' argument must be a single value. Please choose either 'total' or 'average' ")
}
# Check if metric is either "total" or "average"
if (!metric %in% c("total", "average")) {
stop("Invalid metric chosen. Please choose either 'total' or 'average'.")
}
# Check whether the input are characters or numeric
if(all(sapply(scores, is.character))){
data <-  mhqol::mhqol_states_to_scores(dimensions = dimensions,
ignore.invalid = ignore.invalid,
ignore.NA = ignore.NA,
retain_old_variables = FALSE)
return(data)
}else if((all(sapply(scores, is.numeric)))){
return(data)
}
# If the chosen metric is "total", provide a total score per participant
if(metric == "total"){
data <- data |>
dplyr::mutate(
LSS = rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
return(data)
# If the chosen metric is "average", provide an average score per dimension and overall
} else if(metric == "average"){
data <- data |>
dplyr::mutate(
LSS = rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
SI_LSS_average <- mean(data$SI_s, na.rm = TRUE)
IN_LSS_average <- mean(data$IN_s, na.rm = TRUE)
MO_LSS_average <- mean(data$MO_s, na.rm = TRUE)
RE_LSS_average <- mean(data$RE_s, na.rm = TRUE)
DA_LSS_average <- mean(data$DA_s, na.rm = TRUE)
PH_LSS_average <- mean(data$PH_s, na.rm = TRUE)
FU_LSS_average <- mean(data$FU_s, na.rm = TRUE)
LSS_average <- mean(data$LSS, na.rm = TRUE)
df <- data.frame(SI_LSS_average, IN_LSS_average, MO_LSS_average, RE_LSS_average, DA_LSS_average, PH_LSS_average, FU_LSS_average, LSS_average)
return(df)
}
}
devtools::document()
shiny_eq5d()
data <- mhqol::mhqol_LSS(dimensions = data[, 3:9],
metric = "total",
ignore.invalid = input$invalid_decision,
ignore.NA = input$NA_decision)
library(shiny)
library(tidyverse)
################################################################
#                       USER INTERFACE                         #
################################################################
ui <- fluidPage(
navbarPage(title = "MHQoL"),
# First panel to recalculate dimensions into scores or utilities ----------
tabPanel(title = "The MHQoL Cooker 👨‍🍳",
sidebarPanel(
fileInput("file", "Choose a file (CSV, Excel, RDS)",
accept = c(".csv", ".xlsx", ".rds")),
textOutput("warning_message"),
h4("Example data"),
p("MHQoL example data scores:", a(img(src="images/icon-excel.png", height = 24, width = 24), href="example-data/example_data_scores.xlsx", target="_blank"), style="margin-bottom:0"),
hr(),
radioButtons("output_decision",
label = "Output",
choices = c("Scores", "Utilities")),
selectInput("country_decision",
label = "Country",
choices = "Netherlands",
selected = "Netherlands"),
radioButtons("NA_decision",
label = "Take NA's into account",
choices = c("TRUE", "FALSE"),
selected = "TRUE"),
radioButtons("invalid_decision",
label = "Take invalid cols into account",
choices = c("TRUE", "FALSE"),
selected = "FALSE")
),
mainPanel(DTOutput("data_output"))
)
)
server <- function(input, output, session){
options(shiny.sanitize.errors = FALSE)
addResourcePath('example-data', "~/mhqol/inst/extdata") # Dit later aanpassen
# First panel to recalculate dimensions into scores or utilities ----------
uploaded_data <- reactive({
req(input$file)
file_path <- input$file$datapath
# Read the file based on its extension
data <- tryCatch(
if (grepl("\\.csv$", input$file$name)) {
read_csv(file_path)
} else if (grepl("\\.xlsx$", input$file$name)) {
readxl::read_excel(file_path)
} else if (grepl("\\.rds$", input$file$name)) {
readRDS(file_path)
} else {
return(NULL)
},
error = function(e) return(NULL)  # Return NULL if there's an error
)
data <- data |>
dplyr::select("ID", "Group", "SI", "IN", "MO", "RE","DA","PH", "FU")
if(input$output_decision == "Utilities"){
# Recalculate data into scores/utilities based on the input
data <- mhqol::mhqol(dimensions = data[, 3:9],
country = input$country_decision,
metric = "total",
ignore.invalid = input$invalid_decision,
ignore.NA = input$NA_decision,
retain_old_variables = TRUE)
}
else if(input$output_decision == "Scores"){
data <- mhqol::mhqol_LSS(dimensions = data[, 3:9],
metric = "total",
ignore.invalid = input$invalid_decision,
ignore.NA = input$NA_decision)
}
return(data)
})
# Warning message if the file is invalid
output$warning_message <- renderText({
if (is.null(uploaded_data())) {
return("⚠️ Please upload a valid dataframe (CSV, Excel, or RDS).")
}
return(NULL)  # No warning if file is valid
})
# Render the processed table
output$data_output <- renderDT({
req(uploaded_data())
datatable(uploaded_data(), options = list(pageLength = 15))
})
}
# Run the application
shinyApp(ui = ui, server = server)
devtools::document
devtools::document()
#' A function to calculate the Level Sum Scores (LSS) of the MHQoL
#'
#' @description
#' `r lifecycle::badge("experimental")`
#' This function calculates the Level Sum Scores (LSS) per dimension of overall
#' of the MHQoL based on the scores of the different dimensions.
#'
#' @param dimensions A dataframe, character vector or list containing the dimensions of the MHQoL.
#' Must contain the following dimensions: SI (Self-Image), IN (INdependence),
#' MO (MOod), RE (RElationships), DA (Daily Activities), PH (Physical Health), FU (FUture).
#'
#' @param metric A character value indicating whether to calculate the "total" or "average" LSS.
#'
#' @param ignore.invalid If TRUE, the function will ignore missing dimensions and continue processing.
#' If FALSE, the function will stop and throw an error.
#'
#' @param ignore.NA If TRUE, the function will ignore NA values in the input data.
#' If FALSE, the function will stop and throw an error.
#'
#' @return A dataframe containing the LSS based on the MHQoL manual.
#'
#' @keywords MHQoL, LSS, Dimensions
#'
#' @examples
#' # Example usage of the mhqol_LSS function
#' # Get the LSS based on a character vector and calculate the total LSS, not all dimensions are present
#' mhqol_LSS(dimensions = c(IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "total", ignore.invalid = TRUE)
#'
#' # Get the LSS based on a dataframe and calculate the average LSS, all dimensions are present
#' mhqol_LSS(dimensions = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3), metric = "average")
#HIER NOG TATOOHEENE VOORZETTEN!
mhqol_LSS <- function(dimensions,
metric = c("average", "total"),
ignore.invalid = FALSE,
ignore.NA = TRUE) {
# Check if metric is a single value
if (length(metric) != 1) {
stop("The 'metric' argument must be a single value. Please choose either 'total' or 'average' ")
}
# Check if metric is either "total" or "average"
if (!metric %in% c("total", "average")) {
stop("Invalid metric chosen. Please choose either 'total' or 'average'.")
}
# Check whether the input are characters or numeric
if(all(sapply(scores, is.character))){
data <-  mhqol::mhqol_states_to_scores(dimensions = dimensions,
ignore.invalid = ignore.invalid,
ignore.NA = ignore.NA,
retain_old_variables = FALSE)
return(data)
}else if((all(sapply(dimensions, is.numeric)))){
return(data)
}
# If the chosen metric is "total", provide a total score per participant
if(metric == "total"){
data <- data |>
dplyr::mutate(
LSS = rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
return(data)
# If the chosen metric is "average", provide an average score per dimension and overall
} else if(metric == "average"){
data <- data |>
dplyr::mutate(
LSS = rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
SI_LSS_average <- mean(data$SI_s, na.rm = TRUE)
IN_LSS_average <- mean(data$IN_s, na.rm = TRUE)
MO_LSS_average <- mean(data$MO_s, na.rm = TRUE)
RE_LSS_average <- mean(data$RE_s, na.rm = TRUE)
DA_LSS_average <- mean(data$DA_s, na.rm = TRUE)
PH_LSS_average <- mean(data$PH_s, na.rm = TRUE)
FU_LSS_average <- mean(data$FU_s, na.rm = TRUE)
LSS_average <- mean(data$LSS, na.rm = TRUE)
df <- data.frame(SI_LSS_average, IN_LSS_average, MO_LSS_average, RE_LSS_average, DA_LSS_average, PH_LSS_average, FU_LSS_average, LSS_average)
return(df)
}
}
runApp('inst/shiny')
#HIER NOG TATOOHEENE VOORZETTEN!
mhqol_LSS <- function(dimensions,
metric = c("average", "total"),
ignore.invalid = FALSE,
ignore.NA = TRUE) {
# Check if metric is a single value
if (length(metric) != 1) {
stop("The 'metric' argument must be a single value. Please choose either 'total' or 'average' ")
}
# Check if metric is either "total" or "average"
if (!metric %in% c("total", "average")) {
stop("Invalid metric chosen. Please choose either 'total' or 'average'.")
}
# Check whether the input are characters or numeric
if(all(sapply(dimensions, is.character))){
data <-  mhqol::mhqol_states_to_scores(dimensions = dimensions,
ignore.invalid = ignore.invalid,
ignore.NA = ignore.NA,
retain_old_variables = FALSE)
return(data)
}else if((all(sapply(dimensions, is.numeric)))){
return(data)
}
# If the chosen metric is "total", provide a total score per participant
if(metric == "total"){
data <- data |>
dplyr::mutate(
LSS = rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
return(data)
# If the chosen metric is "average", provide an average score per dimension and overall
} else if(metric == "average"){
data <- data |>
dplyr::mutate(
LSS = rowSums(dplyr::across(dplyr::everything()), na.rm = TRUE)
)
SI_LSS_average <- mean(data$SI_s, na.rm = TRUE)
IN_LSS_average <- mean(data$IN_s, na.rm = TRUE)
MO_LSS_average <- mean(data$MO_s, na.rm = TRUE)
RE_LSS_average <- mean(data$RE_s, na.rm = TRUE)
DA_LSS_average <- mean(data$DA_s, na.rm = TRUE)
PH_LSS_average <- mean(data$PH_s, na.rm = TRUE)
FU_LSS_average <- mean(data$FU_s, na.rm = TRUE)
LSS_average <- mean(data$LSS, na.rm = TRUE)
df <- data.frame(SI_LSS_average, IN_LSS_average, MO_LSS_average, RE_LSS_average, DA_LSS_average, PH_LSS_average, FU_LSS_average, LSS_average)
return(df)
}
}
devtools::document()
runApp('inst/shiny')
library(shiny)
library(tidyverse)
################################################################
#                       USER INTERFACE                         #
################################################################
ui <- fluidPage(
navbarPage(title = "MHQoL"),
# First panel to recalculate dimensions into scores or utilities ----------
tabPanel(title = "The MHQoL Cooker 👨‍🍳",
sidebarPanel(
fileInput("file", "Choose a file (CSV, Excel, RDS)",
accept = c(".csv", ".xlsx", ".rds")),
textOutput("warning_message"),
h4("Example data"),
p("MHQoL example data scores:", a(img(src="images/icon-excel.png", height = 24, width = 24), href="example-data/example_data_scores.xlsx", target="_blank"), style="margin-bottom:0"),
hr(),
radioButtons("output_decision",
label = "Output",
choices = c("Scores", "Utilities")),
selectInput("country_decision",
label = "Country",
choices = "Netherlands",
selected = "Netherlands"),
radioButtons("NA_decision",
label = "Take NA's into account",
choices = c("TRUE", "FALSE"),
selected = "TRUE"),
radioButtons("invalid_decision",
label = "Take invalid cols into account",
choices = c("TRUE", "FALSE"),
selected = "FALSE")
),
mainPanel(DTOutput("data_output"))
)
)
server <- function(input, output, session){
options(shiny.sanitize.errors = FALSE)
addResourcePath('example-data', "~/mhqol/inst/extdata") # Dit later aanpassen
# First panel to recalculate dimensions into scores or utilities ----------
uploaded_data <- reactive({
req(input$file)
file_path <- input$file$datapath
# Read the file based on its extension
data <- tryCatch(
if (grepl("\\.csv$", input$file$name)) {
read_csv(file_path)
} else if (grepl("\\.xlsx$", input$file$name)) {
readxl::read_excel(file_path)
} else if (grepl("\\.rds$", input$file$name)) {
readRDS(file_path)
} else {
return(NULL)
},
error = function(e) return(NULL)  # Return NULL if there's an error
)
data <- data |>
dplyr::select("ID", "Group", "SI", "IN", "MO", "RE","DA","PH", "FU")
if(input$output_decision == "Utilities"){
# Recalculate data into scores/utilities based on the input
data <- mhqol::mhqol(dimensions = data[, 3:9],
country = input$country_decision,
metric = "total",
ignore.invalid = input$invalid_decision,
ignore.NA = input$NA_decision,
retain_old_variables = TRUE)
return(data)
}
else if(input$output_decision == "Scores"){
data <- mhqol::mhqol_LSS(dimensions = data[, 3:9],
metric = "total",
ignore.invalid = input$invalid_decision,
ignore.NA = input$NA_decision)
return(data)
}
})
# Warning message if the file is invalid
output$warning_message <- renderText({
if (is.null(uploaded_data())) {
return("⚠️ Please upload a valid dataframe (CSV, Excel, or RDS).")
}
return(NULL)  # No warning if file is valid
})
# Render the processed table
output$data_output <- renderDT({
req(uploaded_data())
datatable(uploaded_data(), options = list(pageLength = 15))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
################################################################
#                       USER INTERFACE                         #
################################################################
ui <- fluidPage(
navbarPage(title = "MHQoL"),
# First panel to recalculate dimensions into scores or utilities ----------
tabPanel(title = "The MHQoL Cooker 👨‍🍳",
sidebarPanel(
fileInput("file", "Choose a file (CSV, Excel, RDS)",
accept = c(".csv", ".xlsx", ".rds")),
textOutput("warning_message"),
h4("Example data"),
p("MHQoL example data scores:", a(img(src="images/icon-excel.png", height = 24, width = 24), href="example-data/example_data_scores.xlsx", target="_blank"), style="margin-bottom:0"),
hr(),
radioButtons("output_decision",
label = "Output",
choices = c("Scores", "Utilities")),
selectInput("country_decision",
label = "Country",
choices = "Netherlands",
selected = "Netherlands"),
radioButtons("NA_decision",
label = "Take NA's into account",
choices = c("TRUE", "FALSE"),
selected = "TRUE"),
radioButtons("invalid_decision",
label = "Take invalid cols into account",
choices = c("TRUE", "FALSE"),
selected = "FALSE")
),
mainPanel(DTOutput("data_output"))
)
)
server <- function(input, output, session){
options(shiny.sanitize.errors = FALSE)
addResourcePath('example-data', "~/mhqol/inst/extdata") # Dit later aanpassen
# First panel to recalculate dimensions into scores or utilities ----------
uploaded_data <- reactive({
req(input$file)
file_path <- input$file$datapath
# Read the file based on its extension
data <- tryCatch({
if (grepl("\\.csv$", input$file$name)) {
read_csv(file_path)
} else if (grepl("\\.xlsx$", input$file$name)) {
readxl::read_excel(file_path)
} else if (grepl("\\.rds$", input$file$name)) {
readRDS(file_path)
} else {
return(NULL)
},
runApp('inst/shiny')
example_data_scores_1 <- example_data_scores |>
dplyr::select("ID", "Group", "SI", "IN", "MO", "RE","DA","PH", "FU")
mhqol(dimensions = example_data_scores_1[3:9], metric = "total")
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
