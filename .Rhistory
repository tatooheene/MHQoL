NA_character_
},
DA_s = if("DA" %in% colnames(scores)){
if(any(!DA %in% 0:3 & !is.na(DA))) stop("Error: DA contains values outside [0,3]")
dplyr::case_when(DA == 3 ~ "I am very satisfied with my daily activities",  # DAILY ACTIVITIES
DA == 2 ~ "I am satisfied with my daily activities",
DA == 1 ~ "I am dissatisfied with my daily activities",
DA ==  0 ~ "I am very dissatisfied with my daily activities",
TRUE ~ NA_character_)
}else{
NA_character_
},
PH_s = if("PH" %in% colnames(scores)){
if(any(!PH %in% 0:3 & is.na (PH))) stop("Error: PH contains values outside [0,3]")
dplyr::case_when(PH == 3 ~ "I have no physical health problems",  # PHYSICAL HEALTH
PH == 2 ~ "I have some physical health problems",
PH == 1 ~ "I have many physical health problems" ,
PH == 0 ~  "I have a great many physical health problems",
TRUE ~ NA_character_)
}else{
NA_character_
},
FU_s = if("FU" %in% colnames(scores)){
if(any(!FU %in% 0:3, na.rm = TRUE)) stop("Error: FU contains values outside [0,3]")
dplyr::case_when(FU == 3 ~ "I am very optimistic about my future", # FUTURE
FU == 2 ~ "I am optimistic about my future",
FU == 1 ~ "I am gloomy about my future",
FU == 0 ~ "I am very gloomy about my future",
TRUE ~ NA_character_)
}else{
NA_character_
}
)
} else{
stop("All scores must be numeric")
}
if(retain_old_variables == FALSE){
new_scores <- new_scores |>
dplyr::select(dplyr::ends_with("_s"))
return(new_scores)
}else if(retain_old_variables == TRUE){
return(new_scores)
}
}
# Test whether the function returns an error when there is a score above 3 in the data
test_that("Test whether the function returns an error when there is a score above 3 in the data", {
expect_error(mhqol_scores_to_states(scores = data.frame(SI = c(3,2,1,0),
IN = c(3,2,1,0),
MO = c(3,2,1,0),
RE = c(3,2,1,0),
DA = c(3,2,1,0),
PH = c(3,2,1,4),
FU = c(3,2,1,0))))
})
#' Provides the states of the MHQoL based on the scores provided (as described in the manual)
#'
#' @description
#' This function provides the states of the MHQoL based on the scores provided (as described in the manual).
#'
#' @aliases mhqol_scores_to_states
#'
#' @usage mhqol_scores_to_states(scores, ignore_invalid = FALSE, ignore_NA = FALSE, retain_old_variables = TRUE)
#'
#' @param scores A dataframe, numeric vector, or list containing the scores of the MHQoL.
#'
#' @param ignore_invalid If TRUE, the function will ignore missing scores and continue processing.
#'
#' @param ignore_NA If TRUE, the function will ignore NA values in the input data.
#'
#' @param retain_old_variables If TRUE, the function will retain the old variables in the output.
#'
#' @return A dataframe containing the states of the MHQoL based on the scores provided.
#'
#' @keywords MHQoL, States, Scores
#'
#' @examples
#' # Example usage of the mhqol_scores_to_states function
#' # Get the states based on a numeric vector, not all scores are present
#' mhqol_scores_to_states(scores = c(IN = 2, DA = 1, PH = 2, FU = 3), ignore_invalid = TRUE)
#'
#' # Get the states based on a dataframe
#' mhqol_scores_to_states(scores = data.frame(SI = 1, IN = 2, MO = 3, RE = 2, DA = 1, PH = 2, FU = 3))
mhqol_scores_to_states  <- function(scores,
ignore_invalid = FALSE,
ignore_NA = FALSE,
retain_old_variables = TRUE){
# Convert the different input types into a dataframe
convert_to_df <- function(scores){
# If input is a dataframe
if(is.data.frame(scores)){
return(scores)
}
# If input is a numeric vector
else if(is.numeric(scores)){
if(is.null(names(scores))){
stop("Numeric vector must have names for dimension mapping")
}
df <- data.frame(matrix(ncol = length(scores), nrow = 1))
names(df) <- names(scores)
for(dim in names(scores)){
df[[dim]] <- scores[dim]
}
return(df)
}
# If input is a list
else if(is.list(scores)){
if(is.null(names(scores))){
stop("List must have names for dimension mapping")
}
return(as.data.frame(scores, stringsAsFactors = FALSE))
} else{
stop("Invalid input type. Please provide a dataframe, numeric vector or list")
}
}
scores <- convert_to_df(scores)
# Required scores
required_scores <- c("SI", "IN", "MO", "RE", "DA", "PH", "FU")
# Check for missing scores
missing_scores <- setdiff(required_scores, colnames(scores))
if(length(missing_scores) > 0){
if(ignore_invalid == FALSE){
stop(paste(
"The following required scores are missing:",
paste(missing_scores, collapse = ",")
))
} else if(ignore_invalid == TRUE){
warning(paste(
"The following required scores are missing and will be ignored:",
paste(missing_scores, collapse = ",")
))
}
}
# Remove missing scores from processing
scores <- scores[, setdiff(colnames(scores), missing_scores), drop = FALSE]
if(any(is.na(scores))){
if(ignore_NA == FALSE){
stop("The data contains NA values. Please handle NAs or set ignore_NA = TRUE.")
} else if (ignore_NA == TRUE){
warning("The data contains NA values. They willl be ignored in processing")
}
}
if(all(sapply(scores, is.numeric))){
new_scores <- scores |>
dplyr::mutate(
SI_s = if("SI" %in% colnames(scores)){
if(any(SI < 0 | SI > 3, na.rm == TRUE)) stop("Error: SI contains values outside [0,3]")
dplyr::case_when(SI == 3 ~ "I think very positively about myself", # SELF-IMAGE
SI == 2 ~ "I think positively about myself",
SI == 1 ~ "I think negatively about myself",
SI == 0 ~ "I think very negatively about myself",
TRUE ~ NA_character_)
}else{
NA_character_
},
IN_s = if("IN" %in% colnames(scores)){
if(any(IN < 0 | IN > 3, na.rm = TRUE)) stop("Error: IN contains values outside [0,3]")
dplyr::case_when(IN == 3 ~ "I am very satisfied with my level of independence", # INDEPENDENCE
IN == 2 ~ "I am satisfied with my level of independence",
IN == 1 ~ "I am dissatisfied with my level of independence",
IN == 0 ~ "I am very dissatisfied with my level of independence",
TRUE ~ NA_character_)
}else{
NA_character_
},
MO_s = if("MO" %in% colnames(scores)){
if(any(MO < 0 | MO > 3, na.rm = TRUE)) stop("Error: MO contains values outside [0,3]")
dplyr::case_when(MO == 3 ~ "I do not feel anxious, gloomy, or depressed",    # MOOD
MO == 2 ~ "I feel a little anxious, gloomy, or depressed",
MO == 1 ~ "I feel anxious, gloomy, or depressed",
MO == 0 ~ "I feel very anxious, gloomy, or depressed",
TRUE ~ NA_character_)
}else{
NA_character_
},
RE_s = if("RE" %in% colnames(scores)){
if(any(RE < 0 | RE > 3, na.rm =TRUE)) stop("Error: RE contains values outside [0,3]")
dplyr::case_when(RE == 3 ~ "I am very satisfied with my relationships",     # RELATIONSHIPS
RE == 2 ~ "I am satisfied with my relationships",
RE == 1 ~ "I am dissatisfied with my relationships",
RE == 0 ~  "I am very dissatisfied with my relationships",
TRUE ~ NA_character_)
}else{
NA_character_
},
DA_s = if("DA" %in% colnames(scores)){
if(any(DA < 0 | DA > 3, na.rm = TRUE)) stop("Error: DA contains values outside [0,3]")
dplyr::case_when(DA == 3 ~ "I am very satisfied with my daily activities",  # DAILY ACTIVITIES
DA == 2 ~ "I am satisfied with my daily activities",
DA == 1 ~ "I am dissatisfied with my daily activities",
DA ==  0 ~ "I am very dissatisfied with my daily activities",
TRUE ~ NA_character_)
}else{
NA_character_
},
PH_s = if("PH" %in% colnames(scores)){
if(any(PH < 0 | PH > 3, na.rm = TRUE)) stop("Error: PH contains values outside [0,3]")
dplyr::case_when(PH == 3 ~ "I have no physical health problems",  # PHYSICAL HEALTH
PH == 2 ~ "I have some physical health problems",
PH == 1 ~ "I have many physical health problems" ,
PH == 0 ~  "I have a great many physical health problems",
TRUE ~ NA_character_)
}else{
NA_character_
},
FU_s = if("FU" %in% colnames(scores)){
if(any(FU < 0 | FU > 3, na.rm = TRUE)) stop("Error: FU contains values outside [0,3]")
dplyr::case_when(FU == 3 ~ "I am very optimistic about my future", # FUTURE
FU == 2 ~ "I am optimistic about my future",
FU == 1 ~ "I am gloomy about my future",
FU == 0 ~ "I am very gloomy about my future",
TRUE ~ NA_character_)
}else{
NA_character_
}
)
} else{
stop("All scores must be numeric")
}
if(retain_old_variables == FALSE){
new_scores <- new_scores |>
dplyr::select(dplyr::ends_with("_s"))
return(new_scores)
}else if(retain_old_variables == TRUE){
return(new_scores)
}
}
# Test whether the function returns an error when there is a score below zero in the data
test_that("Test whether the function returns an error when there is a score below zero in the data", {
expect_error(mhqol_scores_to_states(scores = data.frame(SI = c(3,2,1,0),
IN = c(3,2,1,0),
MO = c(3,2,1,0),
RE = c(3,2,1,0),
DA = c(3,2,1,0),
PH = c(3,2,1,-1),
FU = c(3,2,1,0))))
})
# Test whether the function returns an error when there is a score above 3 in the data
test_that("Test whether the function returns an error when there is a score above 3 in the data", {
expect_error(mhqol_scores_to_states(scores = data.frame(SI = c(3,2,1,0),
IN = c(3,2,1,0),
MO = c(3,2,1,0),
RE = c(3,2,1,0),
DA = c(3,2,1,0),
PH = c(3,2,1,4),
FU = c(3,2,1,0))))
})
# Test whether when retain_old_variables = TRUE, the function also returns the original variables in the data
test_that("Test whether when retain_old_variables = TRUE, the function also returns the original variables in the data", {
df <- mhqol_states_to_scores(states = data.frame(SI = c("I think very positively about myself",
"I think positively about myself",
"I think positively about myself"),
IN = c("I am very satisfied with my level of independence",
"I am satisfied with my level of independence",
"I am satisfied with my level of independence"),
MO = c("I do not feel anxious, gloomy, or depressed",
"I do not feel anxious, gloomy, or depressed",
"I feel anxious, gloomy, or depressed"),
RE = c("I am very satisfied with my relationships",
"I am very satisfied with my relationships",
"I am satisfied with my relationships"),
DA = c("I am very satisfied with my daily activities",
"I am very satisfied with my daily activities",
"I am satisfied with my daily activities"),
PH = c("I have no physical health problems",
"I have no physical health problems",
"I have physical health problems"),
FU = c("I am very optimistic about my future",
"I am very optimistic about my future",
"I am optimistic about my future")), retain_old_variables = TRUE)
expect_true(all(c("SI", "IN", "MO", "RE", "DA", "PH", "FU") %in% colnames(df)))
})
expect_false(all(c("SI", "IN", "MO", "RE", "DA", "PH", "FU") %in% colnames(df)))
df <- mhqol_states_to_scores(states = data.frame(SI = c("I think very positively about myself",
"I think positively about myself",
"I think positively about myself"),
IN = c("I am very satisfied with my level of independence",
"I am satisfied with my level of independence",
"I am satisfied with my level of independence"),
MO = c("I do not feel anxious, gloomy, or depressed",
"I do not feel anxious, gloomy, or depressed",
"I feel anxious, gloomy, or depressed"),
RE = c("I am very satisfied with my relationships",
"I am very satisfied with my relationships",
"I am satisfied with my relationships"),
DA = c("I am very satisfied with my daily activities",
"I am very satisfied with my daily activities",
"I am satisfied with my daily activities"),
PH = c("I have no physical health problems",
"I have no physical health problems",
"I have physical health problems"),
FU = c("I am very optimistic about my future",
"I am very optimistic about my future",
"I am optimistic about my future")), retain_old_variables = FALSE)
expect_false(all(c("SI", "IN", "MO", "RE", "DA", "PH", "FU") %in% colnames(df)))
# Test whether when retain_old_variables = FALSE, the function does not return the original variables in the data
test_that("Test whether when retain_old_variables = FALSE, the function does not return the original variables in the data", {
df <- mhqol_states_to_scores(states = data.frame(SI = c("I think very positively about myself",
"I think positively about myself",
"I think positively about myself"),
IN = c("I am very satisfied with my level of independence",
"I am satisfied with my level of independence",
"I am satisfied with my level of independence"),
MO = c("I do not feel anxious, gloomy, or depressed",
"I do not feel anxious, gloomy, or depressed",
"I feel anxious, gloomy, or depressed"),
RE = c("I am very satisfied with my relationships",
"I am very satisfied with my relationships",
"I am satisfied with my relationships"),
DA = c("I am very satisfied with my daily activities",
"I am very satisfied with my daily activities",
"I am satisfied with my daily activities"),
PH = c("I have no physical health problems",
"I have no physical health problems",
"I have some physical health problems"),
FU = c("I am very optimistic about my future",
"I am very optimistic about my future",
"I am optimistic about my future")), retain_old_variables = FALSE)
expect_false(all(c("SI", "IN", "MO", "RE", "DA", "PH", "FU") %in% colnames(df)))
})
# Test whether when retain_old_variables = TRUE, the function also returns the original variables in the data
test_that("Test whether when retain_old_variables = TRUE, the function also returns the original variables in the data", {
df <- mhqol_states_to_scores(states = data.frame(SI = c("I think very positively about myself",
"I think positively about myself",
"I think positively about myself"),
IN = c("I am very satisfied with my level of independence",
"I am satisfied with my level of independence",
"I am satisfied with my level of independence"),
MO = c("I do not feel anxious, gloomy, or depressed",
"I do not feel anxious, gloomy, or depressed",
"I feel anxious, gloomy, or depressed"),
RE = c("I am very satisfied with my relationships",
"I am very satisfied with my relationships",
"I am satisfied with my relationships"),
DA = c("I am very satisfied with my daily activities",
"I am very satisfied with my daily activities",
"I am satisfied with my daily activities"),
PH = c("I have no physical health problems",
"I have no physical health problems",
"I have some physical health problems"),
FU = c("I am very optimistic about my future",
"I am very optimistic about my future",
"I am optimistic about my future")), retain_old_variables = TRUE)
expect_true(all(c("SI", "IN", "MO", "RE", "DA", "PH", "FU") %in% colnames(df)))
})
# Test whether when retain_old_variables = FALSE, the function does not return the original variables in the data
test_that("Test whether when retain_old_variables = FALSE, the function does not return the original variables in the data", {
df <- mhqol_states_to_scores(states = data.frame(SI = c("I think very positively about myself",
"I think positively about myself",
"I think positively about myself"),
IN = c("I am very satisfied with my level of independence",
"I am satisfied with my level of independence",
"I am satisfied with my level of independence"),
MO = c("I do not feel anxious, gloomy, or depressed",
"I do not feel anxious, gloomy, or depressed",
"I feel anxious, gloomy, or depressed"),
RE = c("I am very satisfied with my relationships",
"I am very satisfied with my relationships",
"I am satisfied with my relationships"),
DA = c("I am very satisfied with my daily activities",
"I am very satisfied with my daily activities",
"I am satisfied with my daily activities"),
PH = c("I have no physical health problems",
"I have no physical health problems",
"I have some physical health problems"),
FU = c("I am very optimistic about my future",
"I am very optimistic about my future",
"I am optimistic about my future")), retain_old_variables = FALSE)
expect_false(all(c("SI", "IN", "MO", "RE", "DA", "PH", "FU") %in% colnames(df)))
})
devtools::document()
usethis::use_news_md
# Test whether the function returns the correct scores for the states
test_that("Test whether the function returns the correct scores for the states", {
df <- mhqol_states_to_scores(states = data.frame(SI = c("I think very positively about myself",
"I think positively about myself",
"I think negatively about myself",
"I think very negatively about myself"),
IN = c("I am very satisfied with my level of independence",
"I am satisfied with my level of independence",
"I am dissatisfied with my level of independence",
"I am very dissatisfied with my level of independence"),
MO = c("I do not feel anxious, gloomy, or depressed",
"I feel a little anxious, gloomy, or depressed",
"I feel anxious, gloomy, or depressed",
"I feel very anxious, gloomy, or depressed"),
RE = c("I am very satisfied with my relationships",
"I am satisfied with my relationships",
"I am dissatisfied with my relationships",
"I am very dissatisfied with my relationships"),
DA = c("I am very satisfied with my daily activities",
"I am satisfied with my daily activities",
"I am dissatisfied with my daily activities",
"I am very dissatisfied with my daily activities"),
PH = c("I have no physical health problems",
"I have some physical health problems",
"I have many physical health problems",
"I have a great many physical health problems"),
FU = c("I am very optimistic about my future",
"I am optimistic about my future",
"I am gloomy about my future",
"I am very gloomy about my future")))
expect_equal(df$SI_s, c(3, 2, 1, 0))
expect_equal(df$IN_s, c(3, 2, 1, 0))
expect_equal(df$MO_s, c(3, 2, 1, 0))
expect_equal(df$RE_s, c(3, 2, 1, 0))
expect_equal(df$DA_s, c(3, 2, 1, 0))
expect_equal(df$PH_s, c(3, 2, 1, 0))
expect_equal(df$FU_s, c(3, 2, 1, 0))
})
usethis::use_news_md()
usethis::use_cran_comments()
devtools::build_readme()
usethis::use_version('minor')
devtools::submit_cran()
?eq5d
?tatooheene
grep("\\alias{mhqol_utilities}", list.files("man", full.names = TRUE), value = TRUE)
# Save the dataset
usethis::use_data(df_utilities_countries, overwrite = TRUE, internal = TRUE)
unlink("man/df_utilities_countries.Rd")
list.files("man", pattern = "\\.Rd$", full.names = TRUE)
grep("Get the", list.files("R", full.names = TRUE), value = TRUE)
# Test whether when ignore_na = TRUE, the function does not return an Error but a Warning when there are NA values in the data
test_that("Test whether when ignore_na = TRUE, the function returns a warning when there are NA values in the data", {
expect_warning(mhqol_scores_to_states(scores = data.frame(SI = c(3, 2, NA),
IN = c(3,1,NA),
MO = c(3,2,1),
RE = c(3,2,1),
DA = c(3,1,2),
PH = c(1,0,1),
FU = c(2,1,1)), ignore_NA = TRUE))
})
devtools::document()
usethis::use_news_md()
usethis::use_cran_comments()
usethis::use_version('minor')
devtools::submit_cran()
grep("Get the", list.files("R", full.names = TRUE), value = TRUE
)
grep("Get the", list.files("man", full.names = TRUE), value = TRUE)
grep("Get the", list.files("R", full.names = TRUE), value = TRUE)
Sys.setenv("_R_CHECK_HTML_TIDY_" = "FALSE")
devtools::document()
usethis::use_news_md()
usethis::use_cran_comments()
usethis::use_version('minor')
devtools::submit_cran()
data <- MHQoL::mhqol_states_to_scores(states = dimensions,
ignore_invalid = ignore_invalid,
ignore_NA = ignore_NA,
retain_old_variables = FALSE)
unlink("man/df_utilities_countries.Rd")
# Convert character dimensions to numeric scores
if (all(sapply(dimensions, is.character))) {
data <- MHQoL::mhqol_states_to_scores(states = dimensions,
ignore_invalid = ignore_invalid,
ignore_NA = ignore_NA,
retain_old_variables = FALSE)
} else if (all(sapply(dimensions, is.numeric))) {
data <- as.data.frame(dimensions)  # Ensure it's a dataframe
validate_dimensions <- function(data) {
# Define the columns to check
columns_to_check <- c("SI", "IN", "MO", "RE", "DA", "PH", "FU")
# Loop through each column and validate the values
for (col in columns_to_check) {
if (col %in% colnames(data)) {
invalid_values <- data[[col]][!is.na(data[[col]]) & (data[[col]] < 0 | data[[col]] > 3)]
if (length(invalid_values) > 0) {
stop(paste("Error: Column", col, "contains values outside the range [0, 3]:", paste(invalid_values, collapse = ", ")))
}
}
}
}
validate_dimensions(data)
} else {
stop("The 'dimensions' argument must be either all numeric or all character values.")
}
unlink("man/df_utilities_countries.Rd")
usethis::use_news_md()
usethis::use_cran_comments()
usethis::use_version('minor')
devtools::submit_cran()
devtools::document()
devtools::check()
devtools::document()
usethis::use_news_md()
usethis::use_cran_comments()
usethis::use_version('minor')
devtools::document()
usethis::use_news_md()
1
usethis::use_news_md()
usethis::use_cran_comments()
usethis::use_version('minor')
devtools::submit_cran()
devtools::document()
usethis::use_news_md()
* Initial CRAN submission.
usethis::use_cran_comments()
usethis::use_version('minor')
devtools::submit_cran()
devtools::document()
usethis::use_news_md()
usethis::use_version('minor')
devtools::submit_cran()
usethis::use_news_md()
usethis::use_version('minor')
devtools::submit_cran()
devtools::document()
usethis::use_news_md()
usethis::use_version('minor')
devtools::submit_cran()
